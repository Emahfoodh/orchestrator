version: '3.8'

services:
  # Inventory Database
  inventory-db:
    image: postgres:13-alpine
    container_name: inventory-db
    environment:
      POSTGRES_DB: ${INVENTORY_DB_NAME:-movies_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - inventory-db-volume:/var/lib/postgresql/data
    networks:
      - microservices-network
    restart: unless-stopped
    # Simplified health check for database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Billing Database
  billing-db:
    image: postgres:13-alpine
    container_name: billing-db
    environment:
      POSTGRES_DB: ${BILLING_DB_NAME:-billing_db}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - billing-db-volume:/var/lib/postgresql/data
    networks:
      - microservices-network
    restart: unless-stopped
    # Simplified health check for database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Queue
  rabbit-queue:
    image: rabbitmq:3-management-alpine
    container_name: rabbit-queue
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
    ports:
      - "15672:15672"  # Management UI
    networks:
      - microservices-network
    restart: unless-stopped
    # Keep RabbitMQ health check as it's reliable
    healthcheck:
      test: ["CMD", "rabbitmqctl", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Inventory Application
  inventory-app:
    build:
      context: ./srcs/inventory-app
      dockerfile: Dockerfile
    image: inventory-app
    container_name: inventory-app
    environment:
      - DATABASE_URI=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@inventory-db:5432/${INVENTORY_DB_NAME:-movies_db}
      - HOST=0.0.0.0
      - PORT=${INVENTORY_APP_PORT:-8080}
      - DEBUG=${DEBUG:-false}
    depends_on:
      inventory-db:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

  # Billing Application
  billing-app:
    build:
      context: ./srcs/billing-app
      dockerfile: Dockerfile
    image: billing-app
    container_name: billing-app
    environment:
      - DATABASE_URI=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@billing-db:5432/${BILLING_DB_NAME:-billing_db}
      - RABBITMQ_HOST=rabbit-queue
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-guest}
      - RABBITMQ_QUEUE=${RABBITMQ_QUEUE:-billing_queue}
      - HOST=0.0.0.0
      - PORT=${BILLING_APP_PORT:-8080}
      - DEBUG=${DEBUG:-false}
    depends_on:
      billing-db:
        condition: service_healthy
      rabbit-queue:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

  # API Gateway
  api-gateway-app:
    build:
      context: ./srcs/api-gateway
      dockerfile: Dockerfile
    image: api-gateway-app
    container_name: api-gateway-app
    environment:
      - INVENTORY_API_URL=http://inventory-app:${INVENTORY_APP_PORT:-8080}
      - BILLING_API_URL=http://billing-app:${BILLING_APP_PORT:-8080}
      - RABBITMQ_HOST=rabbit-queue
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=${RABBITMQ_USER:-guest}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD:-guest}
      - RABBITMQ_QUEUE=${RABBITMQ_QUEUE:-billing_queue}
      - HOST=0.0.0.0
      - PORT=${API_GATEWAY_PORT:-3000}
      - DEBUG=${DEBUG:-false}
    ports:
      - "${EXTERNAL_API_PORT:-3000}:${API_GATEWAY_PORT:-3000}"
    depends_on:
      - inventory-app
      - billing-app
      - rabbit-queue
    volumes:
      - api-gateway-volume:/app/logs
    networks:
      - microservices-network
    restart: unless-stopped

volumes:
  inventory-db-volume:
    driver: local
  billing-db-volume:
    driver: local
  api-gateway-volume:
    driver: local

networks:
  microservices-network:
    driver: bridge